name: Backport to Develop

on:
  pull_request:
    types:
      - closed
    branches:
      - main
      - master

jobs:
  backport:
    name: Backport to develop
    # Only run if the PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # We need the full history for merging
      
      - name: Check for backport labels
        run: |
          LABEL_BACKPORT="backport develop"
          LABEL_NOT_BACKPORT="not backport"
          LABELS=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name')
          if echo "$LABELS" | grep -q "$LABEL_BACKPORT" || echo "$LABELS" | grep -q "$LABEL_NOT_BACKPORT"; then
              echo "PR with valid backport label"
          else
              echo "PR does not have any of the required labels: $LABEL_BACKPORT or $LABEL_NOT_BACKPORT"
              exit 1
          fi
          if echo "$LABELS" | grep -q "$LABEL_NOT_BACKPORT"; then
              echo "PR with not backport action"
              exit 0
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Extract pr branch name
        id: extract-branch
        run: |
          PR_BRANCH="${{ github.event.pull_request.head.ref }}"
          echo "pr_branch=${PR_BRANCH}" >> $GITHUB_OUTPUT
          echo "Release branch is ${PR_BRANCH}"

      - name: Identify commits to backport
        id: identify-commits
        run: |
          # Get the commit SHAs of the PR
          COMMITS_TO_BACKPORT=$(gh pr view ${{ github.event.pull_request.number }} --json commits --jq ''.commits | .[].oid')
          
          echo "Found the following commits to backport:"
          gh pr view ${{ github.event.pull_request.number }} --json commits --jq '.commits | .[] | "\(.oid) \(.messageHeadline)"'
          
          echo "commits_to_backport<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS_TO_BACKPORT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create backport branch
        run: |
          git checkout develop
          git pull origin develop
          PR_BRANCH_NAME="${{ steps.extract-branch.outputs.pr_branch }}"
          BACKPORT_BRANCH="backport/$PR_BRANCH_NAME"
          git checkout -b ${BACKPORT_BRANCH}
          echo "Created backport branch: ${BACKPORT_BRANCH}"

      - name: Backport commits to develop
        run: |
          COMMITS_TO_BACKPORT="${{ steps.identify-commits.outputs.commits_to_backport }}"
          # If no commits to backport, exit gracefully
          if [[ -z "$COMMITS_TO_BACKPORT" ]]; then
            echo "No non-merge commits to backport. Exiting."
            exit 0
          fi
          
          # Cherry-pick each commit
          for COMMIT in $COMMITS_TO_BACKPORT; do
            echo "Cherry-picking commit: $COMMIT"
            if ! git cherry-pick -x "$COMMIT"; then
              echo "Cherry-pick failed for commit $COMMIT. Resolving conflicts is required."
              git cherry-pick --abort

              # Create issue about the conflict
              gh issue create \
                --title "Cherry-pick failed: Backporting ${{ steps.extract-branch.outputs.pr_branch }} to develop" \
                --body "There was a cherry-pick failure for commit $COMMIT when trying to backport changes from ${{ steps.extract-branch.outputs.pr_branch }} to develop. Resolving conflicts is required."
              exit 1
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Handle successful cherry-pick
        run: |
          PR_BRANCH_NAME="${{ steps.extract-branch.outputs.pr_branch }}"
          BACKPORT_BRANCH="backport/$PR_BRANCH_NAME"
          git push origin ${BACKPORT_BRANCH}
          
          # Create PR using GitHub CLI
          gh pr create \
            --base develop \
            --head ${BACKPORT_BRANCH} \
            --title "Backport: ${{ github.event.pull_request.title }}" \
            --body "This PR backports changes from ${{ steps.extract-branch.outputs.pr_branch }} that were merged into main via #${{ github.event.pull_request.number }}."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
