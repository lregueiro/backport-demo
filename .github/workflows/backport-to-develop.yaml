name: Backport to Develop

on:
  pull_request:
    types:
      - closed
    branches:
      - main
      - master

jobs:
  backport:
    name: Backport to develop
    # Only run if the PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # We need the full history for merging
      
      - name: Check for backport labels
        id: check-backport
        run: |
          LABEL_BACKPORT="backport develop"
          LABEL_NOT_BACKPORT="not backport"
          LABELS=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name')
          if echo "$LABELS" | grep -q "$LABEL_BACKPORT" || echo "$LABELS" | grep -q "$LABEL_NOT_BACKPORT"; then
              echo "PR with valid backport label:"
          fi
          if  if echo "$LABELS" | grep -q "$LABEL_BACKPORT"; then
            echo "backport_status=continue" >> $GITHUB_OUTPUT
            echo "$LABEL_BACKPORT"
          else
            echo "backport_status=abort" >> $GITHUB_OUTPUT
            echo "$LABEL_NOT_BACKPORT"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        if: steps.check-backport.outputs.backport_status == 'continue'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Extract pr branch name
        if: steps.check-backport.outputs.backport_status == 'continue'
        id: extract-branch
        run: |
          PR_BRANCH="${{ github.event.pull_request.head.ref }}"
          echo "pr_branch=${PR_BRANCH}" >> $GITHUB_OUTPUT
          echo "Release branch is ${PR_BRANCH}"

      - name: Create backport branch
        if: steps.check-backport.outputs.backport_status == 'continue'
        run: |
          git checkout develop
          git pull origin develop
          PR_BRANCH_NAME="${{ steps.extract-branch.outputs.pr_branch }}"
          BACKPORT_BRANCH="backport/$PR_BRANCH_NAME"
          git checkout -b ${BACKPORT_BRANCH}
          echo "Created backport branch: ${BACKPORT_BRANCH}"

      - name: Merge PR changes
        if: steps.check-backport.outputs.backport_status == 'continue'
        id: merge
        run: |
          # Get the merge commit SHA from the closed PR
          MERGE_COMMIT_SHA="${{ github.event.pull_request.merge_commit_sha }}"
          
          # Attempt the merge
          if git merge ${MERGE_COMMIT_SHA}; then
            echo "merge_status=success" >> $GITHUB_OUTPUT
            echo "Successfully merged PR changes"
          else
            echo "merge_status=conflict" >> $GITHUB_OUTPUT
            echo "Merge conflict occurred"
            git merge --abort
          fi
      
      - name: Handle successful merge
        if: steps.merge.outputs.merge_status == 'success'
        run: |
          PR_BRANCH_NAME="${{ steps.extract-branch.outputs.pr_branch }}"
          BACKPORT_BRANCH="backport/$PR_BRANCH_NAME"
          git push origin ${BACKPORT_BRANCH}
          
          # Create PR using GitHub CLI
          gh pr create \
            --base develop \
            --head ${BACKPORT_BRANCH} \
            --title "Backport: ${{ github.event.pull_request.title }}" \
            --body "This PR backports changes from ${{ steps.extract-branch.outputs.pr_branch }} that were merged into main via #${{ github.event.pull_request.number }}."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle merge conflict
        if: steps.merge.outputs.merge_status == 'conflict'
        run: |
          # Create issue about the conflict
          gh issue create \
            --title "Merge conflict: Backporting ${{ steps.extract-branch.outputs.pr_branch }} to develop" \
            --body "There was a merge conflict when trying to backport changes from ${{ steps.extract-branch.outputs.pr_branch }} to develop. Manual intervention is required."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
